// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

syntax = "proto3";

package openapi.v3;

import "google/protobuf/any.proto";

// This option lets the proto compiler generate Java code inside the package
// name (see below) instead of inside an outer class. It creates a simpler
// developer experience by reducing one-level of name nesting and be
// consistent with most programming languages that don't support outer classes.
option java_multiple_files = true;

// The Java outer classname should be the filename in UpperCamelCase. This
// class is only used to hold proto descriptor, so developers don't need to
// work with it directly.
option java_outer_classname = "OpenAPIProto";

// The Java package name must be proto package name with proper prefix.
option java_package = "org.openapi_v3";

// A reasonable prefix for the Objective-C symbols generated from the package.
// It should at a minimum be 3 characters long, all uppercase, and convention
// is to use an abbreviation of the package name. Something short, but
// hopefully unique enough to not conflict with things that may come along in
// the future. 'GPB' is reserved for the protocol buffer implementation itself.
option objc_class_prefix = "OAS";

message Any {
  google.protobuf.Any value = 1;
  string yaml = 2;
}

message AnyOrExpression {
  oneof oneof {
    Any any = 1;
    Expression expression = 2;
  }
}

// A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.
message Callback {
  repeated NamedPathItem expression = 1;
  repeated NamedSpecificationExtension specification_extension = 2;
}

message CallbackOrReference {
  oneof oneof {
    Callback callback = 1;
    Reference reference = 2;
  }
}

// A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Callback Object that describes a request that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.
message Callbacks {
  repeated NamedCallbackOrReference name = 1;
  repeated NamedSpecificationExtension specification_extension = 2;
}

// Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.
message Components {
  Schemas schemas = 1;
  Responses responses = 2;
  Parameters parameters = 3;
  Examples examples = 4;
  RequestBodies request_bodies = 5;
  Headers headers = 6;
  SecuritySchemes security_schemes = 7;
  Links links = 8;
  Callbacks callbacks = 9;
  repeated NamedSpecificationExtension specification_extension = 10;
}

// Contact information for the exposed API.
message Contact {
  string name = 1;
  string url = 2;
  string email = 3;
  repeated NamedSpecificationExtension specification_extension = 4;
}

// Describes a set of supported media types. A Content Object can be used in Request Body Object, Parameter Objects, Header Objects, and Response Objects.  Each key in the Content Object is the media type of the Media Type Object.
message Content {
  repeated NamedMediaType media_type = 1;
}

message Document {
  string openapi = 1;
  Info info = 2;
  repeated Server servers = 3;
  Paths paths = 4;
  Components components = 5;
  repeated SecurityRequirement security = 6;
  repeated Tag tags = 7;
  ExternalDocs external_docs = 8;
  repeated NamedSpecificationExtension specification_extension = 9;
}

// An object representing multipart region encoding for `requestBody` objects.
message Encoding {
  repeated NamedEncodingProperty property = 1;
}

// A single encoding definition applied to a single schema property.
message EncodingProperty {
  string content_type = 1;
  Object headers = 2;
  string style = 3;
  bool explode = 4;
  repeated NamedSpecificationExtension specification_extension = 5;
}

// Allows sharing examples for operation requests and responses. This object can either be a freeform object, array or primitive value.  To represent examples of media types that cannot naturally represented in the OpenAPI definition, a string value can be used to contain the example with escaping where necessary.
message Example {
}

message ExampleOrReference {
  oneof oneof {
    Example example = 1;
    Reference reference = 2;
  }
}

message Examples {
}

message Expression {
  repeated NamedAny additional_properties = 1;
}

// Allows referencing an external resource for extended documentation.
message ExternalDocs {
  string description = 1;
  string url = 2;
  repeated NamedSpecificationExtension specification_extension = 3;
}

// The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
message Header {
  string name = 1;
  string in = 2;
  string description = 3;
  bool required = 4;
  bool deprecated = 5;
  bool allow_empty_value = 6;
  string style = 7;
  bool explode = 8;
  bool allow_reserved = 9;
  SchemaOrReference schema = 10;
  repeated ExampleOrReference examples = 11;
  ExampleOrReference example = 12;
  Content content = 13;
}

message HeaderOrReference {
  oneof oneof {
    Header header = 1;
    Reference reference = 2;
  }
}

// Lists the headers that can be sent in a response or forwarded via a link. Note that RFC 7230 states header names are case insensitive.
message Headers {
  repeated NamedHeaderOrReference name = 1;
}

// The object provides metadata about the API. The metadata can be used by the clients if needed, and can be presented in editing or documentation generation tools for convenience.
message Info {
  string title = 1;
  string description = 2;
  string terms_of_service = 3;
  Contact contact = 4;
  License license = 5;
  string version = 6;
  repeated NamedSpecificationExtension specification_extension = 7;
}

message ItemsItem {
  repeated SchemaOrReference schema_or_reference = 1;
}

// License information for the exposed API.
message License {
  string name = 1;
  string url = 2;
  repeated NamedSpecificationExtension specification_extension = 3;
}

// The `Link Object` is responsible for defining a possible operation based on a single response.
message Link {
  string href = 1;
  string operation_id = 2;
  LinkParameters parameters = 3;
  Headers headers = 4;
  string description = 5;
  repeated NamedSpecificationExtension specification_extension = 6;
}

message LinkOrReference {
  oneof oneof {
    Link link = 1;
    Reference reference = 2;
  }
}

// Using the `operationId` to reference an operation in the definition has many benefits, including the ability to define media type options, security requirements, response and error payloads. Many operations require parameters to be passed, and these MAY be dynamic depending on the response itself.  To specify parameters required by the operation, we can use a **Link Parameters Object**. This object contains parameter names along with static or dynamic values:
message LinkParameters {
  repeated NamedAnyOrExpression name = 1;
}

// The links object represents a set of possible design-time links for a response. The presence of a link does not guarantee the caller's ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.  As opposed to _dynamic_ links (links provided **in** the response payload), the OAS linking mechanism does not require that link information be provided in a specific response format at runtime.  For computing links, and providing instructions to execute them, variable substitution is used for accessing values in a response and using them as values while invoking the linked operation.
message Links {
  repeated NamedLinkOrReference name = 1;
}

// Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
message MediaType {
  SchemaOrReference schema = 1;
  repeated ExampleOrReference examples = 2;
  ExampleOrReference example = 3;
  Encoding encoding = 4;
  repeated NamedSpecificationExtension specification_extension = 5;
}

// Automatically-generated message used to represent maps of Any as ordered (name,value) pairs.
message NamedAny {
  // Map key
  string name = 1;
  // Mapped value
  Any value = 2;
}

// Automatically-generated message used to represent maps of AnyOrExpression as ordered (name,value) pairs.
message NamedAnyOrExpression {
  // Map key
  string name = 1;
  // Mapped value
  AnyOrExpression value = 2;
}

// Automatically-generated message used to represent maps of CallbackOrReference as ordered (name,value) pairs.
message NamedCallbackOrReference {
  // Map key
  string name = 1;
  // Mapped value
  CallbackOrReference value = 2;
}

// Automatically-generated message used to represent maps of EncodingProperty as ordered (name,value) pairs.
message NamedEncodingProperty {
  // Map key
  string name = 1;
  // Mapped value
  EncodingProperty value = 2;
}

// Automatically-generated message used to represent maps of HeaderOrReference as ordered (name,value) pairs.
message NamedHeaderOrReference {
  // Map key
  string name = 1;
  // Mapped value
  HeaderOrReference value = 2;
}

// Automatically-generated message used to represent maps of LinkOrReference as ordered (name,value) pairs.
message NamedLinkOrReference {
  // Map key
  string name = 1;
  // Mapped value
  LinkOrReference value = 2;
}

// Automatically-generated message used to represent maps of MediaType as ordered (name,value) pairs.
message NamedMediaType {
  // Map key
  string name = 1;
  // Mapped value
  MediaType value = 2;
}

// Automatically-generated message used to represent maps of Parameter as ordered (name,value) pairs.
message NamedParameter {
  // Map key
  string name = 1;
  // Mapped value
  Parameter value = 2;
}

// Automatically-generated message used to represent maps of PathItem as ordered (name,value) pairs.
message NamedPathItem {
  // Map key
  string name = 1;
  // Mapped value
  PathItem value = 2;
}

// Automatically-generated message used to represent maps of RequestBody as ordered (name,value) pairs.
message NamedRequestBody {
  // Map key
  string name = 1;
  // Mapped value
  RequestBody value = 2;
}

// Automatically-generated message used to represent maps of ResponseOrReference as ordered (name,value) pairs.
message NamedResponseOrReference {
  // Map key
  string name = 1;
  // Mapped value
  ResponseOrReference value = 2;
}

// Automatically-generated message used to represent maps of Schema as ordered (name,value) pairs.
message NamedSchema {
  // Map key
  string name = 1;
  // Mapped value
  Schema value = 2;
}

// Automatically-generated message used to represent maps of SecurityScheme as ordered (name,value) pairs.
message NamedSecurityScheme {
  // Map key
  string name = 1;
  // Mapped value
  SecurityScheme value = 2;
}

// Automatically-generated message used to represent maps of ServerVariable as ordered (name,value) pairs.
message NamedServerVariable {
  // Map key
  string name = 1;
  // Mapped value
  ServerVariable value = 2;
}

// Automatically-generated message used to represent maps of SpecificationExtension as ordered (name,value) pairs.
message NamedSpecificationExtension {
  // Map key
  string name = 1;
  // Mapped value
  SpecificationExtension value = 2;
}

// Configuration details for a supported OAuth Flow
message OauthFlow {
  string authorization_url = 1;
  string token_url = 2;
  string refresh_url = 3;
  Scopes scopes = 4;
  repeated NamedSpecificationExtension specification_extension = 5;
}

// Allows configuration of the supported OAuth Flows.
message OauthFlows {
  OauthFlow implicit = 1;
  OauthFlow password = 2;
  OauthFlow client_credentials = 3;
  OauthFlow authorization_code = 4;
  repeated NamedSpecificationExtension specification_extension = 5;
}

message Object {
  repeated NamedAny additional_properties = 1;
}

// Describes a single API operation on a path.
message Operation {
  repeated string tags = 1;
  string summary = 2;
  string description = 3;
  ExternalDocs external_docs = 4;
  string operation_id = 5;
  repeated ParameterOrReference parameters = 6;
  RequestBodyOrReference request_body = 7;
  Responses responses = 8;
  Callbacks callbacks = 9;
  bool deprecated = 10;
  repeated SecurityRequirement security = 11;
  Server servers = 12;
  repeated NamedSpecificationExtension specification_extension = 13;
}

// Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
message Parameter {
  string name = 1;
  string in = 2;
  string description = 3;
  bool required = 4;
  bool deprecated = 5;
  bool allow_empty_value = 6;
  string style = 7;
  bool explode = 8;
  bool allow_reserved = 9;
  SchemaOrReference schema = 10;
  repeated ExampleOrReference examples = 11;
  ExampleOrReference example = 12;
  Content content = 13;
  repeated NamedSpecificationExtension specification_extension = 14;
}

message ParameterOrReference {
  oneof oneof {
    Parameter parameter = 1;
    Reference reference = 2;
  }
}

message Parameters {
  repeated NamedParameter additional_properties = 1;
}

// Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.
message PathItem {
  string _ref = 1;
  string summary = 2;
  string description = 3;
  Operation get = 4;
  Operation put = 5;
  Operation post = 6;
  Operation delete = 7;
  Operation options = 8;
  Operation head = 9;
  Operation patch = 10;
  Operation trace = 11;
  Server servers = 12;
  repeated ParameterOrReference parameters = 13;
  repeated NamedSpecificationExtension specification_extension = 14;
}

// Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the `Server Object` in order to construct the full URL.  The Paths MAY be empty, due to ACL constraints.
message Paths {
  repeated NamedPathItem path = 1;
  repeated NamedSpecificationExtension specification_extension = 2;
}

message Primitive {
  oneof oneof {
    int64 integer = 1;
    double number = 2;
    bool boolean = 3;
    string string = 4;
  }
}

message Properties {
  repeated NamedSchema additional_properties = 1;
}

// A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is done as defined by the JSON Reference specification and not by the JSON Schema specification.
message Reference {
  string _ref = 1;
}

message RequestBodies {
  repeated NamedRequestBody additional_properties = 1;
}

// Describes a single request body.
message RequestBody {
  string description = 1;
  Content content = 2;
  bool required = 3;
  repeated NamedSpecificationExtension specification_extension = 4;
}

message RequestBodyOrReference {
  oneof oneof {
    RequestBody request_body = 1;
    Reference reference = 2;
  }
}

// Describes a single response from an API Operation, including design-time, static  `links` to operations based on the response.
message Response {
  string description = 1;
  Headers headers = 2;
  Content content = 3;
  Links links = 4;
  repeated NamedSpecificationExtension specification_extension = 5;
}

message ResponseOrReference {
  oneof oneof {
    Response response = 1;
    Reference reference = 2;
  }
}

// A container for the expected responses of an operation. The container maps a HTTP response code to the expected response. It is not expected from the documentation to necessarily cover all possible HTTP response codes, since they may not be known in advance. However, it is expected  from the documentation to cover a successful operation response and any  known errors.  The `default` MAY be used as a default response object for all HTTP codes  that are not covered individually by the specification.  The `Responses Object` MUST contain at least one response code, and it  SHOULD be the response for a successful operation call.
message Responses {
  ResponseOrReference default = 1;
  repeated NamedResponseOrReference response_code = 2;
  repeated NamedSpecificationExtension specification_extension = 3;
}

// The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is an extended subset of the JSON Schema Specification Wright Draft 00.  Further information about the properties can be found in JSON Schema Core and JSON Schema Validation. Unless stated otherwise, the property definitions follow the JSON Schema specification as referenced here.
message Schema {
  bool nullable = 1;
  string discriminator = 2;
  bool read_only = 3;
  bool write_only = 4;
  Xml xml = 5;
  ExternalDocs external_docs = 6;
  bool deprecated = 7;
  string title = 8;
  double multiple_of = 9;
  double maximum = 10;
  bool exclusive_maximum = 11;
  double minimum = 12;
  bool exclusive_minimum = 13;
  int64 max_length = 14;
  int64 min_length = 15;
  string pattern = 16;
  int64 max_items = 17;
  int64 min_items = 18;
  bool unique_items = 19;
  int64 max_properties = 20;
  int64 min_properties = 21;
  repeated string required = 22;
  repeated Any enum = 23;
  string type = 24;
  repeated SchemaOrReference all_of = 25;
  repeated SchemaOrReference one_of = 26;
  repeated SchemaOrReference any_of = 27;
  Schema not = 28;
  ItemsItem items = 29;
  Properties properties = 30;
  string description = 31;
  string format = 32;
  repeated NamedSpecificationExtension specification_extension = 33;
}

message SchemaOrReference {
  oneof oneof {
    Schema schema = 1;
    Reference reference = 2;
  }
}

message Schemas {
  repeated NamedSchema additional_properties = 1;
}

// Lists the available scopes for an OAuth2 security scheme.
message Scopes {
  repeated NamedAny name = 1;
  repeated NamedSpecificationExtension specification_extension = 2;
}

// Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.  Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where there multiple query parameters or HTTP headers are required to convey security information.  When a list of Security Requirement Objects is defined on the Open API object or Operation Object, only one of Security Requirement Objects in the list needs to be satisfied to authorize.
message SecurityRequirement {
  repeated NamedAny name = 1;
}

// Allows the definition of a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header or as a query parameter) and OAuth2's common flows (implicit, password, application and access code).
message SecurityScheme {
  string type = 1;
  string description = 2;
  string name = 3;
  string in = 4;
  string scheme = 5;
  string bearer_format = 6;
  OauthFlows flow = 7;
  string open_id_connect_url = 8;
  repeated NamedSpecificationExtension specification_extension = 9;
}

message SecuritySchemes {
  repeated NamedSecurityScheme additional_properties = 1;
}

// An object representing a Server.
message Server {
  string url = 1;
  string description = 2;
  ServerVariables variables = 3;
  repeated NamedSpecificationExtension specification_extension = 4;
}

// An object representing a Server Variable for server URL template substitution.
message ServerVariable {
  repeated Primitive enum = 1;
  Primitive default = 2;
  string description = 3;
  repeated NamedSpecificationExtension specification_extension = 4;
}

message ServerVariables {
  repeated NamedServerVariable name = 1;
  repeated NamedSpecificationExtension specification_extension = 2;
}

// Any property starting with x- is valid.
message SpecificationExtension {
  oneof oneof {
    int64 integer = 1;
    double number = 2;
    bool boolean = 3;
    string string = 4;
  }
}

message StringArray {
  repeated string value = 1;
}

// Allows adding meta data to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag used there.
message Tag {
  string name = 1;
  string description = 2;
  ExternalDocs external_docs = 3;
  repeated NamedSpecificationExtension specification_extension = 4;
}

// A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.
message Xml {
  string name = 1;
  string namespace = 2;
  string prefix = 3;
  bool attribute = 4;
  bool wrapped = 5;
  repeated NamedSpecificationExtension specification_extension = 6;
}

